--load generator
--load operators
--qload groverTypesGeneralised


let H = generateMatrix(hadamard,2)
let I = generateMatrix(identity,4)

let Htwo = tensor(H,H)

let f = lambda(string){
	lambda(x){
		if((x = string)){
				[0 1]
		}
		else{
			[1 0]
		}
	}
}


let groverIter = lambda(state,Uf,times,N){
	
	let hN = tensorTimesN(H,logTwo(N))
	let average = apply(hN, genZero(N))

	let groverOper =  ((2 * outer(average,average)) - generateMatrix(identity,length(average)))

	let opb = tensor(groverOper,generateMatrix(identity,2))

	let iteration = apply(opb,Uf)
	groverRoutine(state,iteration,times)
}

let genZero = lambda(size){
	if((size = 1)){
		[1]
	}
	else{
		prepend(0,genZero((size - 1)))
	}
}

let tensorTimesN = lambda(op,n){
	if((n = 1)){
		op
	}
	else{
		tensor(op,tensorTimesN(op,(n - 1)))
	}
}

let grover = lambda(string){
	let N = length(string)
	let logN = logTwo . length(string)
	let Uf = oracle(generateMatrix(f(string),N))
	let initialState = apply(tensor(tensorTimesN(H,logN),H),tensor(genZero(N),[0 1]))
	groverIter(initialState,Uf,toInt(sqrt(N)),N)
}

grover([1 0 0 0 0 0 0 0])


